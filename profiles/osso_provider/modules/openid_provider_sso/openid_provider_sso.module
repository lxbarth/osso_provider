<?php

/**
 * @file
 * Hooks, callbacks for OpenID Provider SSO.
 *
 * @todo
 * - Storing Known Relying Parties in Drupal variable does not scale.
 */

/**
 * Implementation of hook_menu().
 */
function openid_provider_sso_menu() {
  $items = array();
  $items['logout/login'] = array(
    'page callback' => 'openid_provider_sso_logout_login',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['sso/trusted-sites'] = array(
    'page callback' => 'openid_provider_sso_relying_parties_opml',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function openid_provider_sso_form_alter(&$form, $form_state, $form_id) {
  if (in_array($form_id, array('user_register', 'user_login', 'user_pass'))) {
    if ($_GET['destination'] == 'openid/provider/continue') {
      drupal_add_js(drupal_get_path('module', 'openid_provider_sso') .'/openid_provider_sso.js');
      drupal_add_js('Drupal.settings.destination='. drupal_to_js($_GET['destination']) .';', 'inline');
    }
  }
  if ($form_id == 'openid_provider_form') {
    // If RP is known take decisions that simplify the user's choices.
    if ($rp = openid_provider_sso_relying_party($form_state['storage']['realm'])) {
      global $user;
      unset($form['cancel']);
      unset($form['submit_always']);
      $form['submit_once']['#value'] = t('Log in');
      $form['logout_login']['#value'] = l(t('Not @user?', array('@user' => $user->name)), 'logout/login');
      $form['intro']['#value'] = '<div>'. t('Log in to @relying_party as @user?', array('@relying_party' => $rp['name'], '@user' => $user->name)) .'</div>';
      // Cache request in session, we may need this information later
      // in openid_provider_sso_logout_login().
      $request = _openid_response();
      $_SESSION['openid_provider_sso']['request'] = $request;
    }
  }
}

/**
 * Returns a relying party by its realm. Returns FALSE if no relying party of
 * given realm is known. $realm may be URL encoded.
 */
function openid_provider_sso_relying_party($realm) {
  $realm = trim(urldecode($realm), '/');
  foreach (variable_get('openid_provider_sso_rps', array()) as $rp) {
    if (trim($rp['realm'], '/') == $realm) {
      return $rp;
    }
  }
  return FALSE;
}

/**
 * Page callback for rendering a list of trusted sites.
 */
function openid_provider_sso_relying_parties_opml() {

  // Generate an OPML of trusted sites.
  $output = '<?xml version="1.0" encoding="utf-8"?>'."\n";
  $output .= '<opml version="2.0">'."\n";
  $output .= '<head>'."\n";
  $output .= '  <title>'. t('Trusted relying parties for !site', array('!site' => variable_get('site_name', 'Drupal'))) .'</title>'."\n";
  $output .= '  <dateCreated>'. format_date(time(), 'custom', 'r', 0) .'</dateCreated>'."\n";
  $output .= '</head>'."\n";
  $output .= '<body>'."\n";
  foreach (variable_get('openid_provider_sso_rps', array()) as $rp) {
    $output .= '  <outline text="'. check_plain($rp['name']) .'" htmlUrl="'. check_url($rp['realm']) .'"/>'."\n";
  }
  $output .= '</body>'."\n";
  $output .= '</opml>';

  drupal_set_header('Content-Type=text/x-opml');
  print $output;
}

/**
 * Logout / login callback. Passes a RP's authentication request through a
 * 'log in as different user'.
 */
function openid_provider_sso_logout_login() {
  $request = $_SESSION['openid_provider_sso']['request'];

  // +++ Begin copy from user_logout().
  global $user;
 
  watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
  
  // Destroy the current session:
  session_destroy();
  // Only variables can be passed by reference workaround.
  $null = NULL;
  user_module_invoke('logout', $null, $user);

  // Load the anonymous user
  $user = drupal_anonymous_user();

  // +++ End copy from user_logout().

  // Copy RP request if available and either 'checkid_immediate' or 
  // 'checkid_setup', redirect user to login screen and then to Provider end 
  // point. See openid_provider_continue().
  // THIS DOES NOT WORK, AS A NEW SESSION IS ACTUALLY ONLY CREATED WHEN THE USER
  // REQUEST THE NEXT PAGE.
  if (isset($request['mode'])) {
    if (in_array($request['mode'], array('checkid_immediate', 'checkid_setup'))) {
      $_SESSION['openid_provider']['request'] = $request;
    }
  }

  drupal_goto('user/login', 'destination=openid/provider/continue');
}