<?php

/**
 * @file
 * Hooks, callbacks for OpenID Provider SSO.
 *
 * @todo
 * - Storing Known Relying Parties in Drupal variable does not scale.
 */

/**
 * Implementation of hook_theme().
 */
function openid_provider_sso_theme() {
  return array(
    'openid_provider_sso_welcome' => array(),
  );
}

/**
 * Implementation of hook_menu_alter().
 *
 * Replace registration page with custom callback to reroute user depending on
 * her authentication status.
 */
function openid_provider_sso_menu_alter(&$items) {
  $items['user/register']['page callback'] = 'openid_provider_sso_register_page';
  $items['user/register']['access callback'] = TRUE;
}

/**
 * Implementation of hook_user().
 */
function openid_provider_sso_user($op, &$edit, &$account) {
  switch ($op) {
    case 'insert':
    case 'update':
      // Set an alias for this user.
      path_set_alias('user/'. $account->uid .'/identity', 'openid/'. $account->name);
      break;
    case 'delete':
      path_set_alias('user/'. $account->uid .'/identity');
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Redirect user to relying party after registration.
 */
function openid_provider_sso_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'user_register' && isset($_GET['relying_party'])) {
    $relying_party = trim(check_url(urldecode($_GET['relying_party'])), '/');

    if ($known_rp = openid_provider_sso_relying_party($relying_party)) {

      $form['#relying_party'] = $relying_party;
      $form['#submit'][] = 'openid_provider_sso_user_submit';
      $form['relying_welcome'] = array(
        '#value' => theme('openid_provider_sso_welcome', $known_rp['name']),
        '#weight' => -10,
      );
    }
  }

  // Clean up OpenID provider form.
  if ($form_id == 'openid_provider_form') {
    // Force users to confirm each time. This is necessary to show that the OP
    // is used at all. Otherwise a confusing "magic" log in happens on RP and
    // the user has no chance to understand or bail out if she would like to log
    // in with a different account.
    unset($form['submit_always']);

    $relying_party = openid_provider_sso_relying_party($form_state['storage']['realm']);
    $form['intro']['#value'] = theme('openid_provider_sso_welcome', $relying_party['name']);
    $form['submit_once']['#value'] = t('Log in');
  }
}

/**
 * User form submit handler for redirections.
 */
function openid_provider_sso_user_submit($form, &$form_state) {
  global $user;
  if (isset($form['#relying_party']) && !empty($user->uid)) {
    $identifier = urlencode($user->name);
    drupal_goto($form['#relying_party'], "q=user&identifier=$identifier");
  }
}

/**
 * Custom user/register callback.
 */
function openid_provider_sso_register_page() {
  global $user;

  // If user arrives from trusted RP and is already authenticated on this site,
  // redirect her back to RPs login screen with identifier set.
  // Otherwise fall back to default behavior, return registration form.
  if ($user->uid) {

    if (isset($_GET['relying_party'])) {
      $relying_party = trim(check_url(urldecode($_GET['relying_party'])), '/');

      // Only if RP is actually known.
      if (openid_provider_sso_relying_party($relying_party)) {
        $identifier = urlencode($user->name);
        drupal_goto($relying_party, "q=user&identifier=$identifier");
      }
    }

    return drupal_access_denied();
  }

  return drupal_get_form('user_register');
}

/**
 * Returns a relying party by its realm. Returns FALSE if no relying party of
 * given realm is known.
 */
function openid_provider_sso_relying_party($realm) {
  $realm = trim($realm, '/');
  foreach (variable_get('openid_provider_sso_rps', array()) as $rp) {
    if (trim($rp['realm'], '/') == $realm) {
      return $rp;
    }
  }
  return FALSE;
}

/**
 * Theme welcome text on registration forms.
 *
 * @todo: expand.
 */
function theme_openid_provider_sso_welcome($relying_party) {
  return t('<p>!relying_party is part of !site_name.</p><p>You can log in with your existing !site_name account.</p>', array('!relying_party' => $relying_party, '!site_name' => variable_get('site_name', 'Drupal')));
}