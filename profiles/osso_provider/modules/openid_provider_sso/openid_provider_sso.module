<?php

/**
 * @file
 * Hooks, callbacks for OpenID Provider SSO.
 *
 * @todo
 * - Storing Known Relying Parties in Drupal variable does not scale.
 */

/**
 * Implementation of hook_theme().
 */
function openid_provider_sso_theme() {
  return array(
    'openid_provider_sso_welcome' => array(),
  );
}

/**
 * Implementation of hook_menu_alter().
 *
 * Replace registration page with custom callback to reroute user depending on
 * her authentication status.
 */
function openid_provider_sso_menu_alter(&$items) {
  $items['user']['page callback'] = 'openid_provider_sso_user_page';
  $items['user/%user_uid_optional']['page callback'] = 'openid_provider_sso_user_page';
}

/**
 * Implementation of hook_user().
 */
function openid_provider_sso_user($op, &$edit, &$account) {
  switch ($op) {
    case 'insert':
    case 'update':
      // Set an alias for this user.
      // @todo: Verify that setting path alias does not collide with pathauto.
      path_set_alias('user/'. $account->uid .'/identity', 'openid/'. $account->name);
      break;
    case 'delete':
      path_set_alias('user/'. $account->uid .'/identity');
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 *
 * Redirect user to relying party after registration.
 */
function openid_provider_sso_form_alter(&$form, $form_state, $form_id) {

  // Redirect after registration or login.
  if ($form_id == 'user_register' || $form_id == 'user_login') {

    if ($relying_party = openid_provider_sso_relying_party($_GET['realm'])) {
      // Rewrites all user and user/register links to contain realm.
      drupal_add_js(drupal_get_path('module', 'openid_provider_sso') .'/openid_provider_sso.js');

      $form['#realm'] = $relying_party['realm'];
      $form['#submit'][] = 'openid_provider_sso_user_submit';
      $form['relying_welcome'] = array(
        '#value' => theme('openid_provider_sso_welcome', $relying_party['name']),
        '#weight' => -10,
      );
    }
  }
}

/**
 * User form submit handler for redirections.
 */
function openid_provider_sso_user_submit($form, &$form_state) {
  global $user;
  if (openid_provider_sso_relying_party($form['#realm']) && !empty($user->uid)) {

    // Save RP realm to list of accepted sites to spare the user another round
    // trip from RP to here.
    module_load_include('inc', 'openid_provider');
    _openid_provider_rp_save($user->uid, $form['#realm'], TRUE);

    $identifier = urlencode($user->name);
    drupal_goto($form['#realm'], "q=user&identifier=$identifier");
  }
}

/**
 * Custom user callback.
 */
function openid_provider_sso_user_page() {

  // If user arrives from trusted RP and is already authenticated on this site,
  // redirect her back to RPs login screen with identifier set: Client will
  // populate an OpenID authentication request with the username and send it
  // back to us. This happens invisible to the user.
  // Otherwise fall back to default behavior, return user_page().
  global $user;
  if ($user->uid) {
    return drupal_get_form('openid_provider_sso_confirm', $_GET['realm']);
  }

  return user_page();
}

/**
 * Confirmation form for authentication.
 */
function openid_provider_sso_confirm($form_state, $realm) {

  if ($relying_party = openid_provider_sso_relying_party($realm)) {
    global $user;

    $form = array();
    $form['#realm'] = $realm;
    $form['intro']['#value'] = '<p>'. t('Log in to !relying_party as', array('!relying_party' => $relying_party['name'])) .'</p>';
    $form['intro']['#value'] .= '<h3>'. $user->name .'</h3>';
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Log in'),
    );
    $form['other_user']['#value'] .= '<p>'. l(t('Are you not @user?', array('@user' => $user->name)), 'logout', array('query' => 'destination=user/register')) .'</p>';
    return $form;
  }
}

/**
 * Submit handler for openid_provider_sso_confirm().
 */
function openid_provider_sso_confirm_submit($form, &$form_state) {

  if ($relying_party = openid_provider_sso_relying_party($form['#realm'])) {
    global $user;
    $identifier = urlencode($user->name);
    drupal_goto($relying_party['realm'], "q=user&identifier=$identifier");
  }
}

/**
 * Returns a relying party by its realm. Returns FALSE if no relying party of
 * given realm is known. $realm may be URL encoded.
 */
function openid_provider_sso_relying_party($realm) {
  $realm = trim(urldecode($realm), '/');
  foreach (variable_get('openid_provider_sso_rps', array()) as $rp) {
    if (trim($rp['realm'], '/') == $realm) {
      return $rp;
    }
  }
  return FALSE;
}

/**
 * Theme welcome text on registration forms.
 *
 * @todo: expand.
 */
function theme_openid_provider_sso_welcome($relying_party) {
  return t('<p>!relying_party is part of !site_name.</p><p>You can log in with your existing !site_name account.</p>', array('!relying_party' => $relying_party, '!site_name' => variable_get('site_name', 'Drupal')));
}